// TODO: Test all threads functioning together

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h> 
#include <sys/neutrino.h>
#include <pthread.h>
#include <sched.h>
#include <unistd.h>
#include <string.h>
#include <time.h> 
#include <ctype.h>
#include <sys/time.h>
#include <signal.h>
#include <stdint.h>
#include <errno.h>  
#include <math.h>  

#define ONE_THOUSAND	1000
#define ONE_MILLION		1000000
/* offset and period are in microsends. */
#define OFFSET 1000000
#define PERIOD 5000000
#define PERIOD_TASK_SECOND 1000000
#define PERIOD_TASK_TENTH_SECOND 100000
#define PERIOD_TASK_TEN_MILLISECONDS 10000 //10000us
sigset_t sigst;

/*-------------------------Function declarations----------------------*/
void periodicTimer();
void *producerReader(void *);
static void wait_next_activation(void);
int start_periodic_timer(uint64_t offset, int period);
static void task_body(void);
void consumerDisplay();
/*-------------------------------------------------------------------*/

/*------------------------Global variables------------------------*/
double doubleCurrentTime = 0.0;
bool timerActive = true;
char filePath []= "/home/coen320/dataset.csv";
double fuelConsumption[94383];
double engineSpeed[94383];
double engineCoolantTemperature[94383];
double currentGear[94383];
double transmissionOilTemperature[94383];
double vehicleSpeed[94383];
double accelerationSpeedLongitudinal[94383];
double indicationOfBreakSwitch[94383];
/*---------------------------------------------------------------*/

//-------------------------------Test query methods--------------------------------------
char* getfield(char* line, int column)
{
    char* tok;
    for (tok = strtok(line, ","); tok && *tok; tok = strtok(NULL, ",\n"))
    {
        if (!--column){
                return tok;
        }           
    }
    return NULL;
}

void creatArrayOfFuelConsumptionValues() {

    char line[1024];
    char *tmp = strdup(line);
    int location = 0;
    int count = 0;
    double myval;
    double tempHolder;
    char myvalues[94383];
    char buffer[1024];
    FILE *fp;


	fp = fopen(filePath, "r");
	if(fp != NULL){
		//printf("Inside if \n");
		while(fgets(buffer, 1024, fp) != NULL){
			if(sscanf(buffer, "%lf", &myval) != 1){
				//printf("scan failed\n");			
			}
			fuelConsumption[count] = myval;
			//printf("%f\n",myval);
			count++;
			//printf("count value %d\n", count);
			//mydelay(10);
			
		}
	}	
		 fclose(fp);		
}

void creatArrayOfEngineSpeedValues() {

    char line[1024];
    char *tmp = strdup(line);
    int location = 0;
    int count = 0;
    double myval;
    double tempHolder;
    char myvalues[94383];
    char buffer[1024];
    FILE *fp;


	fp = fopen(filePath, "r");
	if(fp != NULL){
		//printf("Inside if \n");
		while(fgets(buffer, 1024, fp) != NULL){
			if(sscanf(buffer, "%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%lf", &myval) != 1){
				//printf("scan failed\n");			
			}
			engineSpeed[count] = myval;
			//printf("%f\n",myval);
			count++;
			//printf("count value %d\n", count);
			//mydelay(10);
			
		}
	}	
		 fclose(fp);

}
void creatArrayOfEngineCoolantTemperatureValues() {

    char line[1024];
    char *tmp = strdup(line);
    int location = 0;
    int count = 0;
    double myval;
    double tempHolder;
    char myvalues[94383];
    char buffer[1024];
    FILE *fp;


	fp = fopen(filePath, "r");
	if(fp != NULL){
		//printf("Inside if \n");
		while(fgets(buffer, 1024, fp) != NULL){
			if(sscanf(buffer, "%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%lf", &myval) != 1){
				//printf("scan failed\n");			
			}
			engineCoolantTemperature[count] = myval;
			//printf("%f\n",myval);
			count++;
			//printf("count value %d\n", count);
			//mydelay(10);
			
		}
	}	
		 fclose(fp);
}


void creatArrayOfCurrentGearValues() {

    char line[1024];
    char *tmp = strdup(line);
    int location = 0;
    int count = 0;
    double myval;
    double tempHolder;
    char myvalues[94383];
    char buffer[1024];
    FILE *fp;


	fp = fopen(filePath, "r");
	if(fp != NULL){
		printf("Inside if \n");
		while(fgets(buffer, 1024, fp) != NULL){
			if(sscanf(buffer, "%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%lf", &myval) != 1){
				printf("scan failed\n");			
			}
			currentGear[count] = myval;
			//printf("%f\n",myval);
			count++;
			//printf("count value %d\n", count);
			//mydelay(10);
			
		}
	}	
		 fclose(fp);
}
void creatArrayOfTransmissionOilTemperatureValues() {
    char line[1024];
    char *tmp = strdup(line);
    int location = 0;
    int count = 0;
    double myval;
    double tempHolder;
    char myvalues[94383];
    char buffer[1024];
    FILE *fp;


	fp = fopen(filePath, "r");
	if(fp != NULL){
		printf("Inside if \n");
		while(fgets(buffer, 1024, fp) != NULL){
			if(sscanf(buffer, "%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%lf", &myval) != 1){
				printf("scan failed\n");			
			}
			transmissionOilTemperature[count] = myval;
			//printf("%f\n",myval);
			count++;
			//printf("count value %d\n", count);
			//mydelay(10);
			
		}
	}	
		 fclose(fp);
}
void creatArrayOfVehicleSpeedValues() {

    char line[1024];
    char *tmp = strdup(line);
    int location = 0;
    int count = 0;
    double myval;
    double tempHolder;
    char myvalues[94383];
    char buffer[1024];
    FILE *fp;


	fp = fopen(filePath, "r");
	if(fp != NULL){
		printf("Inside if \n");
		while(fgets(buffer, 1024, fp) != NULL){
			if(sscanf(buffer, "%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%lf", &myval) != 1){
				printf("scan failed\n");			
			}
			vehicleSpeed[count] = myval;
			//printf("%f\n",myval);
			count++;
			//printf("count value %d\n", count);
			//mydelay(10);
			
		}
	}	
		 fclose(fp);
}
void creatArrayOfAccelerationSpeedLongitudinalValues() {

    char line[1024];
    char *tmp = strdup(line);
    int location = 0;
    int count = 0;
    double myval;
    double tempHolder;
    char myvalues[94383];
    char buffer[1024];
    FILE *fp;


	fp = fopen(filePath, "r");
	if(fp != NULL){
		printf("Inside if \n");
		while(fgets(buffer, 1024, fp) != NULL){
			if(sscanf(buffer, "%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%lf", &myval) != 1){
				printf("scan failed\n");			
			}
			accelerationSpeedLongitudinal[count] = myval;
			//printf("%f\n",myval);
			count++;
			//printf("count value %d\n", count);
			//mydelay(10);
			
		}
	}	
		 fclose(fp);
}
void creatArrayOfIndicationOfBreakSwitchValues() {

    char line[1024];
    char *tmp = strdup(line);
    int location = 0;
    int count = 0;
    double myval;
    double tempHolder;
    char myvalues[94383];
    char buffer[1024];
    FILE *fp;


	fp = fopen(filePath, "r");
	if(fp != NULL){
		printf("Inside if \n");
		while(fgets(buffer, 1024, fp) != NULL){
			if(sscanf(buffer, "%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%*lf,%lf", &myval) != 1){
				printf("scan failed\n");			
			}
			indicationOfBreakSwitch[count] = myval;
			//printf("%f\n",myval);
			count++;
			//printf("count value %d\n", count);
			//mydelay(10);
			
		}
	}	
		 fclose(fp);
}
//----------------------------------------------------------------------------------------


// Struct to hold data for array when displaying in real-time in function
struct threadArgs {
   	int period;
//    double array[94383];	//TODO: Change to size of column from csv
    double array[100000];	//TODO: Change to size of column from csv
    double *globalVar;
};
	
	//Global variables to display
	int maxVariableCount = 8;	// Use this to end main process once variableCount meets this value
	int variableCount = 0;		// Increment until max count is met, and terminate program
	int arrSize = sizeof(fuelConsumption)/sizeof(fuelConsumption[0]);
	
	double fuelConsumptionTemp = 0;
	double engineSpeedTemp = 0;
	double engineCoolantTemperatureTemp = 0;
	double currentGearTemp = 0;
	double transmissionOilTemperatureTemp = 0;
	double vehicleSpeedTemp = 0;
	double accelerationSpeedLongitudinalTemp = 0;
	double indicationOfBreakSwitchTemp = 0;
	
int main ()
{   
	/*Creating structs for variables of interest*/
	struct threadArgs* args;	// Fuel Consumption
	struct threadArgs* args2;	// Engine Speed (RPM)
	struct threadArgs* args3;	// Engine Coolant Temperature
	struct threadArgs* args4;	// Current Gear
	struct threadArgs* args5;	// Transmission Oil Temperature
	struct threadArgs* args6;	// Vehicle Speed
	struct threadArgs* args7;	// Acceleration Speed Longitudinal
	struct threadArgs* args8;	// Indication of break switch
	pthread_t	our_thread_id;
	
	// Acquire all values from CSV and parse them into arrays
	creatArrayOfFuelConsumptionValues();
    creatArrayOfEngineSpeedValues();
    creatArrayOfEngineCoolantTemperatureValues();
    creatArrayOfCurrentGearValues();
    creatArrayOfTransmissionOilTemperatureValues();
    creatArrayOfVehicleSpeedValues();
    creatArrayOfAccelerationSpeedLongitudinalValues();
    creatArrayOfIndicationOfBreakSwitchValues();
	
	// Fuel Consumption
	args = malloc(sizeof(struct threadArgs));
	args->period = 10;
	memcpy(args->array, fuelConsumption, sizeof(fuelConsumption));
	args->globalVar = &fuelConsumptionTemp;		
	
	// Engine Speed (RPM)
	args2 = malloc(sizeof(struct threadArgs));
	args2->period = 500;
	memcpy(args2->array, engineSpeed, sizeof(engineSpeed));	
	args2->globalVar = &engineSpeedTemp;
	
	// Engine Coolant Temperature
	args3 = malloc(sizeof(struct threadArgs));
	args3->period = 2000;
	memcpy(args3->array, engineCoolantTemperature, sizeof(engineCoolantTemperature));
	args3->globalVar = &engineCoolantTemperatureTemp;	
	
	// Current Gear
	args4 = malloc(sizeof(struct threadArgs));
	args4->period = 100;
	memcpy(args4->array, currentGear, sizeof(currentGear));
	args4->globalVar = &currentGearTemp;	
	
	// Transmission Oil Temperature
	args5 = malloc(sizeof(struct threadArgs));
	args5->period = 5000;
	memcpy(args5->array, transmissionOilTemperature, sizeof(transmissionOilTemperature));
	args5->globalVar = &transmissionOilTemperatureTemp;	
	
	// Vehicle Speed
	args6 = malloc(sizeof(struct threadArgs));
	args6->period = 100;
	memcpy(args6->array, vehicleSpeed, sizeof(vehicleSpeed));
	args6->globalVar = &vehicleSpeedTemp;
	
	// Acceleration Speed Longitudinal
	args7 = malloc(sizeof(struct threadArgs));
	args7->period = 150;
	memcpy(args7->array, accelerationSpeedLongitudinal, sizeof(accelerationSpeedLongitudinal));
	args7->globalVar = &accelerationSpeedLongitudinalTemp;
	
	// Indication of break switchs
	args8 = malloc(sizeof(struct threadArgs));	
	args8->period = 100;
	memcpy(args8->array, indicationOfBreakSwitch, sizeof(indicationOfBreakSwitch));
	args8->globalVar = &indicationOfBreakSwitchTemp;
	
	// Global timer thread here
	pthread_create(&our_thread_id, NULL, &periodicTimer, NULL);
	
	// Consumer thread here
	pthread_create(NULL, NULL, &consumerDisplay, NULL);

	// Producer threads here
	pthread_create(NULL,NULL, (void *) &producerReader, args);
	pthread_create(NULL,NULL, (void *) &producerReader, args2);
	pthread_create(NULL,NULL, (void *) &producerReader, args3);
//	pthread_create(NULL,NULL, (void *) &producerReader, args4);
//	pthread_create(NULL,NULL, (void *) &producerReader, args5);
//	pthread_create(NULL,NULL, (void *) &producerReader, args6);
//	pthread_create(NULL,NULL, (void *) &producerReader, args7);
//	pthread_create(NULL,NULL, (void *) &producerReader, args8);

	// Global timer now waiting for other threads to finish
	pthread_join(our_thread_id, NULL);	
 	pause();
	return EXIT_SUCCESS;
}

/*Read from the CSV array in real-time*/
void *producerReader(void *argPointer) {
	
	struct threadArgs *args = argPointer;
	int period = args->period;
	double* arrPtr = (args->array);
	double* varName = args->globalVar;
	double temp;
	
	// Prepare values for looping
	int executionCounter = 0;	// Define upcoming period
	long nanoRemainder = 0;
	double microRemainder = 0.0;
	int loopIndex = 2;	// Start at 2 to skip 0's from array

	// Within the CSV array
	while (loopIndex < arrSize){
		double executionPeriod = (double)executionCounter * period;
		double remainder = doubleCurrentTime - executionPeriod;
			
		while (1) {
			if (remainder > -10 && remainder < 0){		
				remainder = fabs(remainder);
				
				// Get the microsecond remainder into nanoseconds
				// Take absolute value, since we are testing for long, not double
				nanoRemainder = (long)abs(remainder * 1000);	
				
				// Acquire the microsecond remainder into nanoseconds
				// Use nanoseconds for sleeping and adding back to total elapsed time
				nsleep(nanoRemainder);
				
				// Get the nanosecond value back into microseconds
				// Important because nanosecond value excludes certain decimal values
				// Microsecond would only contain the digits up until 0.00X
				microRemainder = ((double)nanoRemainder / 1000);
				
				doubleCurrentTime = doubleCurrentTime + microRemainder;
				break;
			}
			// If time is above (such as when period produced is above its expected value)
			else if (remainder >= 0) {
				break;
			}
			else {
				remainder = doubleCurrentTime - executionPeriod;
			}
		}
		
		// Get value from CSV array and set the globalVar to the current value
		temp = *(arrPtr + loopIndex);
		*varName = temp;
 		executionCounter++;		// Keep track of the number of executions
 		loopIndex++;	// Loop to skip the first 2 indexes 	
	}
	
	// Increment counter until all variables are complete
	// End timer when all variables are read
	variableCount++;
	if (variableCount == maxVariableCount) {
		sleep(1);	//Wait 1s for final values to appear (from consumer) before entire program terminates
		timerActive = false;	//End periodicTimer thread
	}
	free(args);	//Free memory!
	return(NULL);
}

void consumerDisplay() {
	while(1) {
		printf("-----------------------------------------------\n");
		printf("Total elapsed time double: %f\n", doubleCurrentTime);
		printf("Fuel Consumption: %f\n", fuelConsumptionTemp);
		printf("Engine Speed: %f\n", engineSpeedTemp);
		printf("Engine Coolant Temperature: %f\n", engineCoolantTemperatureTemp);
		printf("Engine Gear: %f\n", currentGearTemp);
		printf("Transmission Oil Temperature: %f\n", transmissionOilTemperatureTemp);
		printf("Vehicle Speed: %f\n", vehicleSpeedTemp);
		printf("Acceleration Speed Longitudinal Temp: %f\n", accelerationSpeedLongitudinalTemp);
		printf("Indication Of Break Switch: %f\n", indicationOfBreakSwitchTemp);
		printf("-----------------------------------------------\n");
//		nsleep(500000000);	//5ms sleep	
	}
		printf("-----------------Thread functions completed!\n"); 
	
	return(NULL);
}

/*Sleep in nanoseconds*/
int nsleep(long nsec) {
    struct timespec ts;
    int res;

    if (nsec < 0)
    {
        errno = EINVAL;
        return -1;
    }

    ts.tv_sec = nsec / 1000000000L;
    ts.tv_nsec = (nsec % 1000000000L);

    do {
        res = nanosleep(&ts, &ts);
    } while (res && errno == EINTR);

    return res;
}

// Periodic timer function taken from 
// Source : COEN320 Tutorial Week 2: "Week 2: (Part 2) Implementing a periodic task [periodic_task.c]"
//---------------------Tutorial Code for Periodic Timer--------------------
void periodicTimer() {
	int res;
	//set and activate a timer
	// PERIOD_TASK_SECOND = 1s
	// PERIOD_TASK_TENTH_SECOND = 0.1s
	// PERIOD_TASK_TEN_MILLISECONDS = 0.01s = 10ms
	res = start_periodic_timer(OFFSET, PERIOD_TASK_TEN_MILLISECONDS); //10ms 
	if (res < 0 ){
		perror("Start periodic timer");
		return -1;
	}
	
	while (timerActive) {
		wait_next_activation(); //wait for timer expiration
		task_body(); //executes the task
	}
	
	return(NULL);
}

static void wait_next_activation(void) {
	int dummy;
	/* suspend calling process until a signal is pending */
	sigwait(&sigst, &dummy);
}

int start_periodic_timer(uint64_t offset, int period) {
	struct itimerspec timer_spec;
	struct sigevent sigev;
	timer_t timer;
	const int signal = SIGALRM;
	int res;
	
	/* set timer parameters */
	timer_spec.it_value.tv_sec = offset / ONE_MILLION;
	timer_spec.it_value.tv_nsec = (offset % ONE_MILLION) * ONE_THOUSAND;
	timer_spec.it_interval.tv_sec = period / ONE_MILLION;
	timer_spec.it_interval.tv_nsec = (period % ONE_MILLION) * ONE_THOUSAND;
	
	sigemptyset(&sigst); // initialize a signal set
	sigaddset(&sigst, signal); // add SIGALRM to the signal set
	sigprocmask(SIG_BLOCK, &sigst, NULL); //block the signal
	
	/* set the signal event a timer expiration */
	memset(&sigev, 0, sizeof(struct sigevent));
	sigev.sigev_notify = SIGEV_SIGNAL;
	sigev.sigev_signo = signal;
	
	/* create timer */
	res = timer_create(CLOCK_MONOTONIC, &sigev, &timer);
	
	if (res < 0) {
		perror("Timer Create");
		exit(-1);
	}
	
	/* activate the timer */
	return timer_settime(timer, 0, &timer_spec, NULL);
}

static void task_body(void) {
	static int cycles = 0;
	static uint64_t start;
	uint64_t current;
	struct timespec tv;
	
	if (start == 0) {
		clock_gettime(CLOCK_MONOTONIC, &tv);
		start = tv.tv_sec * ONE_THOUSAND + tv.tv_nsec / ONE_MILLION;
	}
	
	clock_gettime(CLOCK_MONOTONIC, &tv);
	current = tv.tv_sec * ONE_THOUSAND + tv.tv_nsec / ONE_MILLION;
	
	if (cycles > 0) {
		doubleCurrentTime += (double)(current - start)/cycles;
	}
	
	cycles++;
}
//---------------------Tutorial Code for Periodic Timer--------------------
